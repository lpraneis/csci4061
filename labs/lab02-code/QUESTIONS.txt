                           __________________

                            LAB 02 QUESTIONS
                           __________________


- Name: (Logan Praneis)
- NetID: (prane001)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `fork1.c'
===================

A
~

  Compile and run the program in `fork1.c'. Show it's output below.

I am number 1, my pid is 18357
I am number 0, my pid is 18356
I am number 2, my pid is 18358
I am number 8, my pid is 18355
I am number 5, my pid is 18361
I am number 6, my pid is 18362
I am number 4, my pid is 18360
I am number 7, my pid is 18363
I am number 3, my pid is 18359

B
~

  Is the output ordered or disordered with respect to the "I am
  number..." statements? Why?

  The output is ordered as child processes (made with the fork command), 
  are asynchonous to the parent process.


C
~

  Add calls to the wait() or waitpid() function to ensure that the
  output is ordered. Paste your code below.

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
  int i;
  for(i = 0; i<8; i++){
    pid_t child = fork();
    if(child == 0){
      break;
    }
  waitpid(child, 0,0);
  }
  printf("I am number %d, my pid is %d\n",i,getpid());
  return 0;
}


D
~

  How many parents and children are there in this program? What is their
  arrangement?

  There is one parent process and there is 8 children.  The arrangement is that the
  parent is only parent to each of the children, there are not multiple layers.


PROBLEM 2 `fork-exec1.c'
========================

A
~

  Compile and run the program in `fork-exec1.c'. Show it's output below.

Running command 'ls'
------------------
total 32K
drwxr-x--x 2 logan logan 4.0K Feb  3 19:06 .
drwxr-x--x 4 logan logan 4.0K Feb  3 18:48 ..
-rwxr-x--x 1 logan logan 8.3K Feb  3 19:06 a.out
-rw-r----- 1 logan logan  332 Feb  3 19:06 fork1.c
-rw-r----- 1 logan logan  360 Feb  3 18:48 fork-exec1.c
-rw-r----- 1 logan logan 2.4K Feb  3 19:06 QUESTIONS.txt

B
~

  Adjust the contents of the `child_argv[]' array. Try remove the "-l"
  element, try adding on ".." prior to the final NULL, or make other
  modifications INCLUDING for the 0th "ls" string.  Recompile and
  describe whether the output has changed.

Running command 'ls'
------------------
.  ..  lab01-code  lab02-code


Yes, the output has changed as the ls command is executing with different arguments.


C
~

  Change the child_cmd string from "ls" to be something else like "gcc"
  or "cat". Recompile and explain what happens now.

  When changed to cat, the following output occurs:

Running command 'cat'
------------------
ls: invalid option -- 'a'
Try 'ls --help' for more information.

What is happening, is that the command running is sending the 'file' cat to the child
process and executing cat. However, the child_argv includes ls as the first entry. This 
means when the error statements are printed, ls is inclued rather than cat. cat does not have
an option '-a' and so, the program errors out.

D
~

  Currently `fork-exec1.c' does not reach the bottom statements.
  ,----
  |   printf("------------------\n");
  |   printf("Finished\n");
  `----
  Correct this by doing the following:
  - Fork a child process
  - Have ONLY the child process call execvp()
  - Have the parent process wait() for the child
  Paste your code below.

#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void){

  char *child_argv[] = {"ls","-ah", "..",NULL};
  char *child_cmd = "ls";

  printf("Running command '%s'\n",child_cmd);
  printf("------------------\n");

  if(fork() == 0){
    execvp(child_cmd,child_argv);
  } else {
    wait(0);
    printf("------------------\n");
    printf("Finished\n");
  } 
  return 0;
}



